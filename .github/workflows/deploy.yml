name: Deploy to Docker Swarm

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push consumer-processor-optimizer
      uses: docker/build-push-action@v5
      with:
        context: ./services/consumer-processor
        file: ./services/consumer-processor/dependencies/godot-asset-optimizer-project/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/consumer-processor-optimizer:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/consumer-processor-optimizer:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          COMMIT_HASH=${{ github.sha }}
          CURRENT_VERSION=${{ github.ref_name }}

    - name: Build and push entity-queue-producer
      uses: docker/build-push-action@v5
      with:
        context: ./services/entity-queue-producer
        file: ./services/entity-queue-producer/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/entity-queue-producer:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/entity-queue-producer:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push status-service
      uses: docker/build-push-action@v5
      with:
        context: ./services/status-service
        file: ./services/status-service/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/status-service:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/status-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SWARM_HOST }}
        username: ${{ secrets.SWARM_USERNAME }}
        key: ${{ secrets.SWARM_SSH_KEY }}
        port: ${{ secrets.SWARM_PORT || 22 }}
        script: |
          # Create deployment directory
          mkdir -p ~/godot-server-pipeline
          cd ~/godot-server-pipeline
          
          # Create docker-stack.yml
          cat > docker-stack.yml << 'EOF'
          version: '3.8'
          
          services:
            # Godot Asset Optimizer service - 6 replicas
            consumer-processor-optimizer:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/consumer-processor-optimizer:${{ github.sha }}
              deploy:
                replicas: 6
                restart_policy:
                  condition: on-failure
                  delay: 5s
                  max_attempts: 3
                update_config:
                  parallelism: 2
                  delay: 10s
                  failure_action: rollback
                placement:
                  constraints:
                    - node.role == worker
                resources:
                  limits:
                    cpus: '2'
                    memory: 2G
                  reservations:
                    cpus: '1'
                    memory: 1G
              environment:
                - NODE_ENV=${{ secrets.NODE_ENV || 'production' }}
                - MODE=asset-optimizer
                - AWS_REGION=${{ secrets.AWS_REGION }}
                - AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
                - AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
                - S3_BUCKET=${{ secrets.S3_BUCKET }}
                - SQS_QUEUE_URL=${{ secrets.SQS_QUEUE_URL }}
                - SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }}
                - COMMIT_HASH=${{ github.sha }}
                - CURRENT_VERSION=${{ github.ref_name }}
              volumes:
                - godot-assets:/tmp/godot-assets
              networks:
                - godot-pipeline-network
          
            # Entity queue producer service
            entity-queue-producer:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/entity-queue-producer:${{ github.sha }}
              deploy:
                replicas: 1
                restart_policy:
                  condition: on-failure
                  delay: 5s
                  max_attempts: 3
                update_config:
                  parallelism: 1
                  delay: 10s
                  failure_action: rollback
                placement:
                  constraints:
                    - node.role == worker
                resources:
                  limits:
                    cpus: '0.5'
                    memory: 512M
                  reservations:
                    cpus: '0.25'
                    memory: 256M
              environment:
                - NODE_ENV=${{ secrets.NODE_ENV || 'production' }}
                - PORT=${{ secrets.ENTITY_QUEUE_PORT || '8081' }}
                - AWS_REGION=${{ secrets.AWS_REGION }}
                - AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
                - AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
                - SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }}
                - CATALYST_STORAGE_URL=${{ secrets.CATALYST_STORAGE_URL }}
                - SNAPSHOTS_FETCHER_URL=${{ secrets.SNAPSHOTS_FETCHER_URL }}
              ports:
                - "${{ secrets.ENTITY_QUEUE_PORT || '8081' }}:${{ secrets.ENTITY_QUEUE_PORT || '8081' }}"
              networks:
                - godot-pipeline-network
          
            # Status service
            status-service:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/status-service:${{ github.sha }}
              deploy:
                replicas: 1
                restart_policy:
                  condition: on-failure
                  delay: 5s
                  max_attempts: 3
                update_config:
                  parallelism: 1
                  delay: 10s
                  failure_action: rollback
                placement:
                  constraints:
                    - node.role == worker
                resources:
                  limits:
                    cpus: '0.25'
                    memory: 256M
                  reservations:
                    cpus: '0.1'
                    memory: 128M
              environment:
                - NODE_ENV=${{ secrets.NODE_ENV || 'production' }}
                - PORT=${{ secrets.STATUS_SERVICE_PORT || '8082' }}
              ports:
                - "${{ secrets.STATUS_SERVICE_PORT || '8082' }}:${{ secrets.STATUS_SERVICE_PORT || '8082' }}"
              networks:
                - godot-pipeline-network
          
          volumes:
            godot-assets:
          
          networks:
            godot-pipeline-network:
              driver: overlay
              attachable: true
          EOF
          
          # Log in to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Deploy to swarm
          docker stack deploy -c docker-stack.yml --with-registry-auth godot-pipeline
          
          # Wait for deployment
          sleep 30
          
          # Check deployment status
          docker stack ps godot-pipeline
          
          echo "Deployment completed successfully!"
          echo "Services:"
          echo "- consumer-processor-optimizer: 6 replicas"
          echo "- entity-queue-producer: 1 replica"
          echo "- status-service: 1 replica"